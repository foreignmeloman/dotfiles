# vim: syntax=bash:
# print os version only in interactive mode
# case $- in
#   *i*) lsb_release -d ;;
#   *)
# esac

# Disable crtl-s ctrl-q
stty -ixon

test -s ~/.bash_aliases_work && . ~/.bash_aliases_work || true

# Environment Variables #########################

# {{- $registerPythonArgcomplete := ""}} {{- $winUserName := "" }}

# {{- if eq .chezmoi.osRelease.name "openSUSE Tumbleweed" }}
# {{- $registerPythonArgcomplete = "register-python-argcomplete"}}
PATH="${PATH}:/usr/sbin"
# {{- end }}

# {{- if eq .chezmoi.osRelease.name "Ubuntu" }}
# {{-   $majorVersion := atoi (split "." .chezmoi.osRelease.versionID)._0 }}
# {{-   if ge $majorVersion 24 }}
# {{-     $registerPythonArgcomplete = "register-python-argcomplete"}}
# {{-   else}}
# {{-     $registerPythonArgcomplete = "register-python-argcomplete3"}}
# {{-   end }}
# {{- end }}

PATH="${PATH}:/usr/local/go/bin:${HOME}/.local/bin:${HOME}/.krew/bin"
test -d /home/linuxbrew/.linuxbrew && PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:${PATH}"

# {{- if contains "WSL2" .chezmoi.kernel.osrelease }}
export TMUX_TMPDIR='/tmp'
# WSL2 PATH config
# {{- $winUserName = output "sh" "-c" "/mnt/c/Windows/system32/cmd.exe /c 'echo %UserName%' 2> /dev/null" | trim }}
PATH="${PATH}:/mnt/c/Windows"
PATH="${PATH}:/mnt/c/Windows/system32"
PATH="${PATH}:/mnt/c/Program Files/Rancher Desktop/resources/resources/linux/bin"
PATH="${PATH}:/mnt/c/Users/{{ $winUserName }}/AppData/Local/Programs/Microsoft VS Code/bin"
# WSL2 PATH config END {{- end }}

export PATH
export PS1='\[\033[38;5;10m\]┌\[\033[38;5;39m\][\u@\[\033[38;5;10m\]\h\[\033[38;5;39m\]:\[\033[38;5;14m\]\w\[\033[38;5;39m\]]$(_tmp=$?; test "$(type -t __git_ps1)" = "function" && __git_ps1 "-[\033[38;5;10m%s\033[38;5;39m]"; [[ ${_tmp} != 0 ]] && echo "-[\[\033[0;91m\]${_tmp}\[\033[38;5;39m\]]")\n\[\033[38;5;10m\]└>>>\$ \[$(tput sgr0)\]'
export EDITOR=vim
export SYSTEMD_EDITOR=vim
export BAT_STYLE='plain'
export K9S_FEATURE_GATE_NODE_SHELL=true
export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR:-${HOME}/.ssh}/ssh-agent.socket"


# Aliases #######################################
unalias rm 2> /dev/null || true
alias cp='cp -i'
alias mv='mv -i'
alias ls='ls -a --color --group-directories-first --time-style=long-iso'
alias ll='ls -l'
alias grep='grep --color'
alias egrep='egrep --color'
alias cget='curl -OJL'
alias tar='XZ_DEFAULTS="-T 0" tar'
alias tmux='tmux -2'  # Force 256 color support
alias rdl='redial'
alias readf='readlink -f'
alias gdiff='git diff --no-index'
alias gcd='cd $(git rev-parse --show-toplevel)'
alias python='python3'
# {{- if contains "WSL2" .chezmoi.kernel.osrelease }}
alias clip='/mnt/c/WINDOWS/system32/clip.exe'
# {{- else }}
alias clip='xclip -sel clip'
# {{- end }}
if command -v terraform > /dev/null; then
  function tf {
    terraform "$@"
  }
fi


# Functions #####################################
function mkcd { mkdir -p ${1}; cd ${1}; }
function cheat { curl cheat.sh/${1}; }
function teehee { tee ${1}|less; }
# {{- if not (contains "WSL2" .chezmoi.kernel.osrelease) }}
function _code_wayland {
  /usr/bin/code --ozone-platform=wayland "$@"
}

if [ "${XDG_SESSION_TYPE}" == 'wayland' ]; then
  alias code='_code_wayland'
fi
# {{- end }}

# KeePass WSL2 SSH agent {{- if contains "WSL2" .chezmoi.kernel.osrelease }}
function _ssh_agent_wsl_proxy {
  ss -a | grep -q $1
  if [ $? -ne 0 ] || [ ! -S $1 ]; then
      echo Starting ssh-agent WSL proxy
      if ! command -v socat > /dev/null; then
        echo "ERROR: No socat installed" >&2
      fi
      rm -f $1
      kill $(ps aux | grep "socat UNIX-LISTEN:$1" | head -1 | awk '{print $2}') 2> /dev/null
      (setsid socat UNIX-LISTEN:$1,fork EXEC:"/mnt/c/Users/{{ $winUserName }}/root/bin/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &) >/dev/null 2>&1
  fi
}

_ssh_agent_wsl_proxy $SSH_AUTH_SOCK
# KeePass WSL2 SSH agent END {{- end }}

# tmux ##########################################
if ! [ "${TERM_PROGRAM}" == 'vscode' ] && [ -z "${TMUX}" ]; then
  if tmux has-session -t "main" 2> /dev/null; then
    tmux a -t main
  else
    cd
    tmux new -s main
  fi
fi
# tmux END

# kubectl #######################################
if command -v kubectl > /dev/null; then
  source <(kubectl completion bash)
  alias k=kubectl
  complete -o default -F __start_kubectl k
fi
# kubectl END

# {{- if eq .chezmoi.osRelease.name "Ubuntu" }} Ubuntu completions
# yq ############################################
if command -v yq > /dev/null; then
  source <(yq shell-completion bash)
fi
# yq END

# helm ##########################################
if command -v helm > /dev/null; then
  source <(helm completion bash 2> /dev/null)
fi
# helm END

# chezmoi ########################################
if command -v chezmoi > /dev/null; then
  source <(chezmoi completion bash)
fi
# chezmoi END
# Ubuntu completions {{- end }}

# # ruff ##########################################
# if command -v ruff > /dev/null; then
#   source <(ruff generate-shell-completion bash)
# fi
# # ruff END

# uv ##########################################
if command -v uv > /dev/null; then
  source <(uv generate-shell-completion bash)
fi
# uv END

# pipx ##########################################
if command -v pipx > /dev/null; then
  # shellcheck disable=SC1009,SC1054,SC1056,SC1072,SC1073,SC1083 # Go templates
  source <({{ $registerPythonArgcomplete }} pipx)
fi
# pipx END

# aws ###########################################
if command -v aws > /dev/null && command -v aws_completer > /dev/null; then
  complete -C aws_completer aws
fi
# aws END

# yazi ##########################################
# if [ ! -z "$(command -v yazi)" ]; then
#   function yy() {
#     local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
#     yazi "$@" --cwd-file="$tmp"
#     if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
#       builtin cd -- "$cwd"
#     fi
#     rm -f -- "$tmp"
#   }
# fi
# yazi END

# tenv ##########################################
if command -v tenv > /dev/null; then
  source <(tenv completion bash)
fi
# tenv END
