# vim: syntax=bash:
# print os version only in interactive mode
# case $- in
#   *i*) lsb_release -d ;;
#   *)
# esac

# Disable crtl-s ctrl-q
stty -ixon

# Environment Variables
PATH="${PATH}:/usr/local/go/bin:${HOME}/.local/bin:${HOME}/.krew/bin"
# WSL PATH config {{- if contains "WSL2" .chezmoi.kernel.osrelease }}
# {{- $winUserName := output "sh" "-c" "cmd.exe /c 'echo %UserName%' 2> /dev/null" | trim }}
PATH="${PATH}:/mnt/c/Windows"
PATH="${PATH}:/mnt/c/Windows/system32"
PATH="${PATH}:/mnt/c/Program Files/Rancher Desktop/resources/resources/linux/bin"
PATH="${PATH}:/mnt/c/Users/{{ $winUserName }}/AppData/Local/Programs/Microsoft VS Code/bin"
# WSL PATH config END {{- end }}
export PATH
export PS1='\[\033[38;5;10m\]┌\[\033[38;5;39m\][\u@\[\033[38;5;10m\]\h\[\033[38;5;39m\]:\[\033[38;5;14m\]\w\[\033[38;5;39m\]]$(_tmp=$?; test "$(type -t __git_ps1)" = "function" && __git_ps1 "-[\033[38;5;10m%s\033[38;5;39m]"; [[ ${_tmp} != 0 ]] && echo "-[\[\033[0;91m\]${_tmp}\[\033[38;5;39m\]]")\n\[\033[38;5;10m\]└>>>\$ \[$(tput sgr0)\]'
export EDITOR=vim
export SYSTEMD_EDITOR=vim
export BAT_STYLE='plain'
export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR:-${HOME}/.ssh}/ssh-agent.socket"


# Aliases
alias rm='/bin/rm'
alias cp='cp -i'
alias mv='mv -i'
alias ls='ls -a --color --group-directories-first --time-style=long-iso'
alias ll='ls -l'
alias grep='grep --color'
alias egrep='egrep --color'
alias cget='curl -OJL'
alias tar='XZ_DEFAULTS="-T 0" tar'
alias tmux='tmux -2'  # Force 256 color support
alias rdl='redial'
alias readf='readlink -f'
alias gdiff='git diff --no-index'
alias gcd='cd $(git rev-parse --show-toplevel)'
# alias bat='batcat'
{{- if contains "microsoft" (lower .chezmoi.kernel.osrelease) }}
alias clip='/mnt/c/WINDOWS/system32/clip.exe'
{{- else }}
alias clip='xclip -sel clip'
{{- end }}



# Functions
function mkcd { mkdir -p ${1}; cd ${1}; }
function cheat { curl cheat.sh/${1}; }
function teehee { tee ${1}|less; }


# KeePass WSL2 SSH agent {{- if contains "microsoft" (lower .chezmoi.kernel.osrelease) }}
# {{- $winUserName := output "sh" "-c" "cmd.exe /c 'echo %UserName%' 2> /dev/null" | trim }}
function _ssh_agent_wsl_proxy {
  ss -a | grep -q $1
  if [ $? -ne 0 ] || [ ! -S $1 ]; then
      echo Starting ssh-agent WSL proxy
      rm -f $1
      kill $(ps aux | grep "socat UNIX-LISTEN:$1" | head -1 | awk '{print $2}') 2> /dev/null
      (setsid socat UNIX-LISTEN:$1,fork EXEC:"/mnt/c/Users/{{ $winUserName }}/root/bin/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &) >/dev/null 2>&1
  fi
}

_ssh_agent_wsl_proxy $SSH_AUTH_SOCK
# KeePass WSL2 SSH agent END {{- end }}

# tmux
if ! [ "${TERM_PROGRAM}" == 'vscode' ] && [ -z "${TMUX}" ]; then
  if tmux ls 2> /dev/null | grep -qP "^main:"; then
    tmux a -t main
  else
    cd
    tmux new -s main
  fi
fi

function retmux {
  if [[ ${1} == '' ]]; then
    tmux a -t $(tmux ls|head -1|awk -F':' '{print $1}')
  else
    tmux a -t ${1}
  fi
}
function complete_retmux {
  tmux_sessions=$(tmux ls 2> /dev/null|awk -F':' '{print $1}')
  options=()
  if [[ ${1} == ${3} ]]; then
    options=(${tmux_sessions[@]})
  fi
  COMPREPLY=($(compgen -W "${options[*]}" "${COMP_WORDS[${COMP_CWORD}]}"))
}
complete -o nospace -F complete_retmux retmux
# tmux END

# Terraform
_tf_path="$(which terraform)"
if [ ! -z "${_tf_path}" ]; then
  alias tf='terraform'
  complete -C "${_tf_path}" terraform
  complete -C "${_tf_path}" tf
fi
unset _tf_path
# Terraform END

# yq
if [ ! -z "$(which yq)" ]; then
  source <(yq shell-completion bash)
fi
# yq END

# kubectl
if [ ! -z "$(which kubectl)" ]; then
  source <(kubectl completion bash)
  alias k=kubectl
  complete -o default -F __start_kubectl k
fi
# kubectl END

# helm
if [ ! -z "$(which helm)" ]; then
  source <(helm completion bash 2> /dev/null)
  function hupgrade {
    local chart_dir=$(readlink -f $1)
    local args=$(echo "${@:2}")
    local chart_name=$(grep -E '^name: .*$' ${chart_dir}/Chart.yaml | awk '{print $2}')
    local cmd="helm dependency update ${chart_dir} && helm upgrade -i --dependency-update ${args} ${chart_name} ${chart_dir}"
    echo $cmd
    eval $cmd
  }
fi
# helm END

# cezmoi
if [ ! -z "$(which chezmoi)" ]; then
  source <(chezmoi completion bash)
fi
# chezmoi END

# ruff
if [ ! -z "$(which ruff)" ]; then
  source <(ruff generate-shell-completion bash)
fi
# ruff END
